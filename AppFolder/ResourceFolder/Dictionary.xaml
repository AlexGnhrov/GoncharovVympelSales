<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:GoncharovVympelSale.AppFolder.ResourceFolder.ClassFolder"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">




    <LinearGradientBrush x:Key="MainButtonColor" EndPoint="0.5,1" StartPoint="0.5,0">
        <LinearGradientBrush.RelativeTransform>
            <TransformGroup>
                <ScaleTransform CenterY="0.5" CenterX="0.5"/>
                <SkewTransform CenterY="0.5" CenterX="0.5"/>
                <RotateTransform CenterY="0.5" CenterX="0.5"/>
                <TranslateTransform/>
            </TransformGroup>
        </LinearGradientBrush.RelativeTransform>
        <GradientStop Color="#FFFF6720" Offset="0"/>
        <GradientStop Color="#FFFD301A" Offset="1"/>
        <GradientStop Color="#FFFE621F" Offset="0.43"/>
    </LinearGradientBrush>


    <SolidColorBrush x:Key="AuthorizationBackgroundTB" Color="#F1F1F1"/>
    <SolidColorBrush x:Key="SecondColor" Color="#0067E7"/>
    <SolidColorBrush x:Key="SecondColorSELECTED" Color="#FF0072FF"/>




    <SolidColorBrush x:Key="ErrorColor" Color="#E90000"/>
    <SolidColorBrush x:Key="YellowColor" Color="#FFC700"/>
    <SolidColorBrush x:Key="PassColor" Color="#31A336"/>



    <CornerRadius x:Key="CornerValue" TopLeft="5" TopRight="5" BottomRight="5" BottomLeft="5"/>




    <Style TargetType="Image" x:Key="ImageForMenuItem">
        <Setter Property="Stretch" Value="UniformToFill"/>
    </Style>



    <Style TargetType="Image" x:Key="DeleteIconMI" BasedOn="{StaticResource ImageForMenuItem}">
        <Setter Property="Source" Value="/AppFolder/ResourceFolder/ImageFolder/IconForMenuItem/DeleteIcon.png" />
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
    </Style>


    <!--<Style TargetType="Path" x:Key="EditIcon">
        <Setter Property="Data" Value/>
    </Style>-->
    
    <Style TargetType="Image" x:Key="EditIconMI" BasedOn="{StaticResource ImageForMenuItem}">
        <Setter Property="Source" Value="/AppFolder/ResourceFolder/ImageFolder/IconForMenuItem/EditIcon.png" />
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
    </Style>


    <Style TargetType="Image" x:Key="UpdateIconMI" BasedOn="{StaticResource ImageForMenuItem}">
        <Setter Property="Source" Value="/AppFolder/ResourceFolder/ImageFolder/IconForMenuItem/UpdateIcon.png" />
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
    </Style>







    <Style TargetType="{x:Type Border}" x:Key="BackgroundPage">
        <Setter Property="Background" Value="Black"/>
        <Setter Property="Opacity" Value="0.80"/>
        <Setter Property="CornerRadius" Value="3.9"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
    </Style>


    <Style TargetType="{x:Type Frame}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Frame}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="PART_FrameCP" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                    </Border>
                    <ControlTemplate.Triggers>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="Tag" Value="Use"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"  Duration="0:0:0.40" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                          To="0"  Duration="0:0:0.30" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>





                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                                <Condition Property="Tag" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.56"/>
                        </MultiTrigger>





                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainLabel" TargetType="{x:Type Label}">
        <Setter Property="FontSize" Value="32"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="#292D32"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LabelForFields" TargetType="{x:Type Label}" BasedOn="{StaticResource MainLabel}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>


    <Style x:Key="LabelForTB" TargetType="{x:Type Label}" BasedOn="{StaticResource MainLabel}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
    </Style>



    <Style TargetType="{x:Type Border}" x:Key="WinBorder">
        <Setter Property="Background" Value="White"/>
        <Setter Property="CornerRadius" Value="{StaticResource CornerValue}"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="0" Direction="310" BlurRadius="10" Opacity="0.37" />
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style TargetType="{x:Type Window}" x:Key="WinStyle">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"  Duration="0:0:0.40" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                          To="0" Duration="0:0:0.30" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>







    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxForAuthIcon">
        <Setter Property="Margin" Value="10,15"/>
        <Setter Property="Background" Value="{StaticResource AuthorizationBackgroundTB}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Padding" Value="3,0"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="38" MaxWidth="38" Width="38"/>
                                <ColumnDefinition Width="1.5"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <Image Source="{Binding (local:PropertyClass.ImageForTB), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                   Height="20" Width="20" RenderOptions.BitmapScalingMode="HighQuality" />

                            <Border Background="Gray" Grid.Column="1" Margin="0,5" CornerRadius="5"/>

                            <Label x:Name="HintTB" Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}" Grid.Column="2"
                                    Padding="3,0" Margin="3,7,3,0"  Visibility="Collapsed" />

                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" Grid.Column="2"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="PassData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource PassColor}"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="InvalidData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ErrorColor}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="Transparent"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="HintTB" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>


                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxForIcon" BasedOn="{StaticResource TextBoxForAuthIcon}">
        <Setter Property="Background" Value="#55FFFFFF"/>
        <Setter Property="BorderBrush" Value="{StaticResource SecondColor}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="38" MaxWidth="38" Width="38"/>
                                <ColumnDefinition Width="1.5"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <Image Source="{Binding (local:PropertyClass.ImageForTB), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                   Height="20" Width="20" RenderOptions.BitmapScalingMode="HighQuality" />

                            <Border Background="Gray" Grid.Column="1" Margin="0,5" CornerRadius="5"/>

                            <Label x:Name="HintTB" Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}" Grid.Column="2"
                                    Padding="3,0" Margin="3,7,3,0"  Visibility="Collapsed" />

                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" Grid.Column="2"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="PassData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource PassColor}"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="InvalidData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ErrorColor}"/>
                        </Trigger>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="HintTB" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Gray"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxForIcon}" x:Key="SearchTextBox">
        <Setter Property="local:PropertyClass.ImageForTB" Value="/AppFolder/ResourceFolder/ImageFolder/IconForTextBox/SearchIcon.png"/>
        <Setter Property="local:PropertyClass.HintTB" Value="Поиск"/>
        <Setter Property="MaxLength" Value="200"/>
        <Setter Property="Padding" Value="3,0,30,0"/>

    </Style>


    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxForAuthorization" BasedOn="{StaticResource TextBoxForAuthIcon}">
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Label x:Name="HintTB" Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}"
                                    Padding="10,0" Margin="3,7,3,0"/>

                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="PassData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource PassColor}"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="InvalidData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ErrorColor}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="#0067E7"   Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="Black"    Duration="0:0:0.3" />
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="Transparent"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="false"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                            To="3,7,3,0"  Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                             To="-10,-28,2,0"  Duration="0:0:0.2" />

                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>




                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxForIcon}">
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Label x:Name="HintTB" Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}"
                                    Padding="10,0" Margin="3,7,3,0"/>
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="PassData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource PassColor}"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="InvalidData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ErrorColor}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="Black"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="false"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                            To="3,7,3,0"  Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                             To="-10,-27,2,0"  Duration="0:0:0.2" />

                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>




                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                            <Setter Property="BorderBrush" Value="Gray"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>




    <Style TargetType="{x:Type Button}" x:Key="MainButton">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Margin" Value="10,15"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="{StaticResource MainButtonColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="-10,-15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="true">

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.GradientStops[0].Color"
                                                         To="#FE501D" Duration="0:0:0.2"/>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.GradientStops[1].Color"
                                                          To="Red"
                                                        AccelerationRatio="1" Duration="0:0:0.2"/>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.GradientStops[2].Color"
                                                         To="#FE501D"  Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.GradientStops[0].Color"
                                                        To="#FFFF6720"   Duration="0:0:0.2"/>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.GradientStops[1].Color"
                                                        To="#FFFD301A"  
                                                        AccelerationRatio="1" Duration="0:0:0.2"/>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.GradientStops[2].Color"
                                                        To="#FFFE621F"   Duration="0:0:0.2"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>



                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.30"/>
                        </Trigger>



                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style x:Key="YesButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MainButton}">
        <Setter Property="Content" Value="Да"/>
        <Setter Property="Background" Value="{StaticResource PassColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#31A336" To="#228727"   AccelerationRatio="1" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#228727" To="#31A336"   AccelerationRatio="1" Duration="0:0:0.25"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.2"/>
                        </Trigger>



                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NoButton"
        TargetType="{x:Type Button}" BasedOn="{StaticResource MainButton}">
        <Setter Property="Content" Value="Нет"/>
        <Setter Property="Background" Value="{StaticResource ErrorColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#E90000" To="#C60202"   AccelerationRatio="1" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#C60202" To="#E90000"   AccelerationRatio="1" Duration="0:0:0.25"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.2"/>
                        </Trigger>



                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EditForCB" BasedOn="{StaticResource YesButton}"  TargetType="{x:Type Button}" >
        <Setter Property="Width" Value="40"/>
        <Style.Resources>
            <Style TargetType="Image">
                <Setter Property="Height" Value="20"/>
                <Setter Property="Width" Value="20"/>
                <Setter Property="Source" Value="/AppFolder/ResourceFolder/ImageFolder/IconForButton/EditPenIcon.png"/>
                <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
                <Style.Triggers>
                    <Trigger Property="Tag" Value="IsEdit">
                        <Setter Property="Source" Value="/AppFolder/ResourceFolder/ImageFolder/IconForButton/ApplyIcon.png"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>



    <Style x:Key="NoButtonCANTdissable"
        TargetType="{x:Type Button}" BasedOn="{StaticResource MainButton}">
        <Setter Property="Content" Value="Нет"/>
        <Setter Property="Background" Value="{StaticResource ErrorColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#E90000" To="#C60202"   AccelerationRatio="1" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#C60202" To="#E90000"   AccelerationRatio="1" Duration="0:0:0.25"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="DeleteForCB" BasedOn="{StaticResource NoButton}"  TargetType="{x:Type Button}" >
        <Setter Property="Width" Value="40"/>
        <Style.Resources>
            <Style TargetType="Image">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Width" Value="25"/>
                <Setter Property="Source" Value="/AppFolder/ResourceFolder/ImageFolder/IconForButton/TrashBinIcon.png" />
                <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
                <Style.Triggers>
                    <Trigger Property="Tag" Value="IsEdit">
                        <Setter Property="Source" Value="/AppFolder/ResourceFolder/ImageFolder/IconForButton/CancelIcon.png" />
                        <Setter Property="Width" Value="18"/>
                        <Setter Property="Height" Value="18"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="DeleteProduct" BasedOn="{StaticResource NoButtonCANTdissable}"  TargetType="{x:Type Button}" >
        <Setter Property="Width" Value="40"/>
        <Style.Resources>
            <Style TargetType="Image">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Width" Value="25"/>
                <Setter Property="Source" Value="/AppFolder/ResourceFolder/ImageFolder/IconForButton/TrashBinIcon.png" />
                <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
                <Style.Triggers>
                    <Trigger Property="Tag" Value="IsEdit">
                        <Setter Property="Source" Value="/AppFolder/ResourceFolder/ImageFolder/IconForButton/CancelIcon.png" />
                        <Setter Property="Width" Value="18"/>
                        <Setter Property="Height" Value="18"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>


    <Style TargetType="StackPanel" x:Key="ComboboxButtonPannel">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="Width" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Width"
                                                          To="120"   AccelerationRatio="1" Duration="0:0:0.25" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Width"
                                                          To="0"   AccelerationRatio="1" Duration="0:0:0.25" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>



    <SolidColorBrush x:Key="TextBox.Static.Border2" Color="#FFABAdB3"/>



    <Style TargetType="{x:Type PasswordBox}" x:Key="PasswordBoxAuth">
        <Setter Property="local:PropertyClass.ShowPassword" Value="True"/>
        <Setter Property="MaxLength" Value="30"/>
        <Setter Property="Margin" Value="10,15"/>
        <Setter Property="Background" Value="{StaticResource AuthorizationBackgroundTB}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Padding" Value="3,0,5,0"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="38" MaxWidth="38" Width="38"/>
                                <ColumnDefinition Width="1.5"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <Image  Source="{Binding (local:PropertyClass.ImageForTB), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                    Height="20" Width="20" RenderOptions.BitmapScalingMode="HighQuality" />

                            <Border Background="Gray" Grid.Column="1" Margin="0,5" CornerRadius="5"/>


                            <TextBlock x:Name="TextPassword" Foreground="Black" Width="auto" Text="" VerticalAlignment="Center"
                                       Grid.Column="2" Margin="5,0,25,0" Padding="0,0,10,0" Visibility="Hidden"
                                       ScrollViewer.HorizontalScrollBarVisibility="Visible"/>

                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" Grid.Column="2"
                                          HorizontalScrollBarVisibility="Hidden" Margin="0,0,30,0"
                                          VerticalScrollBarVisibility="Hidden"/>


                            <Label x:Name="HintLB"  Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}" Grid.Column="2"
                                    Padding="3,0" Margin="3,7,3,0"  />

                            <ToggleButton Name="ShowPasswordBTN" Cursor="Hand"
                                          HorizontalAlignment="Right" Grid.Column="2"
                                          ClickMode="Press"  Margin="5,0" Visibility="Hidden">
                                <ToggleButton.Template>
                                    <ControlTemplate>
                                        <Image  HorizontalAlignment="Right" Grid.Column="2" Width="25" Height="25" Source="ImageFolder/IconForTextBox/EyeIcon.png"/>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>



                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="InvalidData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ErrorColor}"/>
                        </Trigger>




                        <Trigger Property="IsPressed" SourceName="ShowPasswordBTN" Value="True">
                            <Setter Property="Visibility" TargetName="TextPassword"  Value="Visible"/>
                            <Setter Property="Foreground"  Value="Transparent"/>
                        </Trigger>


                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="Transparent"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource PasswordBoxAuth}">
        <Setter Property="Background" Value="transparent"/>
        <Setter Property="BorderBrush" Value="{StaticResource SecondColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="38" MaxWidth="38" Width="38"/>
                                <ColumnDefinition Width="1.5"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <Image  Source="{Binding (local:PropertyClass.ImageForTB), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                    Height="20" Width="20" RenderOptions.BitmapScalingMode="HighQuality" />

                            <Border Background="Gray" Grid.Column="1" Margin="0,5" CornerRadius="5"/>


                            <TextBlock x:Name="TextPassword" Foreground="Black" Width="auto" Text="" VerticalAlignment="Center"
                                       Grid.Column="2" Margin="5,0,25,0" Padding="0,0,10,0" Visibility="Hidden"
                                       ScrollViewer.HorizontalScrollBarVisibility="Visible"/>

                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" Grid.Column="2"
                                          HorizontalScrollBarVisibility="Hidden" Margin="0,0,30,0"
                                          VerticalScrollBarVisibility="Hidden"/>


                            <Label x:Name="HintLB"  Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}" Grid.Column="2"
                                    Padding="3,0" Margin="3,7,3,0"  />

                            <ToggleButton Name="ShowPasswordBTN" Cursor="Hand"
                                          HorizontalAlignment="Right" Grid.Column="2"
                                          ClickMode="Press"  Margin="5,0" Visibility="Hidden">
                                <ToggleButton.Template>
                                    <ControlTemplate>
                                        <Image  HorizontalAlignment="Right" Grid.Column="2" Width="25" Height="25" Source="ImageFolder/IconForTextBox/EyeIcon.png"/>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>



                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="InvalidData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ErrorColor}"/>
                        </Trigger>




                        <Trigger Property="IsPressed" SourceName="ShowPasswordBTN" Value="True">
                            <Setter Property="Visibility" TargetName="TextPassword"  Value="Visible"/>
                            <Setter Property="Foreground"  Value="Transparent"/>
                        </Trigger>



                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot"  SnapsToDevicePixels="True"  ClipToBounds="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" CornerRadius="5" 
                                ClipToBounds="True" 
                                BorderThickness="1"
                                MinHeight="20" MinWidth="20" 
                                Height="20" Width="20" 
                                MaxHeight="20" MaxWidth="20"
                                Background="{TemplateBinding Background}"
                                Margin="0">


                            <Grid x:Name="markGrid" ClipToBounds="True" Background="Transparent">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                      Fill="Transparent"
                                      Stretch="Fill" Height="11.28" Width="14.28"/>
                                <Rectangle x:Name="HideMark" Fill="Transparent" IsHitTestVisible="True" 
                                           Margin="0,0,0,0" 
                                           HorizontalAlignment="Center" Height="Auto" Width="16"
                                           RadiusX="3.5" RadiusY="3.5"/>
                            </Grid>

                        </Border>

                        <Border x:Name="CornerBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5"
                                Height="20" Width="20" 
                                MaxHeight="20" MaxWidth="20"
                                Margin="0"/>

                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>

                    <ControlTemplate.Triggers>


                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="checkBoxBorder"
                                                        Storyboard.TargetProperty="(Grid.Background).(Color)"
                                                        To="#0067E7" BeginTime="0:0:0.05"   Duration="0:0:0.2" />

                                        <ColorAnimation Storyboard.TargetName="CornerBorder"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"
                                                        To="#0067E7" BeginTime="0:0:0.05"   Duration="0:0:0.2" />

                                        <ColorAnimation Storyboard.TargetName="HideMark"
                                                        Storyboard.TargetProperty="(Rectangle.Fill).(Color)"
                                                        To="#0067E7" BeginTime="0:0:0.05"  Duration="0:0:0.1"  />

                                        <ColorAnimation Storyboard.TargetName="optionMark"
                                                        Storyboard.TargetProperty="(Rectangle.Fill).(Color)"
                                                        To="White"   Duration="0:0:0.1"  />

                                        <ThicknessAnimation Storyboard.TargetName="HideMark"
                                                            Storyboard.TargetProperty="Margin"
                                                            BeginTime="0:0:0.2"
                                                            From="0" To="0,0,-40,0"
                                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="checkBoxBorder"
                                                        Storyboard.TargetProperty="(Grid.Background).(Color)"
                                                        BeginTime="0:0:0.1"
                                                        To="Transparent"    Duration="0:0:0.1" />


                                        <ColorAnimation Storyboard.TargetName="CornerBorder"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"
                                                        BeginTime="0:0:0.1"
                                                        To="Gray"    Duration="0:0:0.1" />

                                        <ColorAnimation Storyboard.TargetName="HideMark"
                                                        Storyboard.TargetProperty="(Rectangle.Fill).(Color)"
                                                        BeginTime="0:0:0.1"
                                                        To="Transparent"    Duration="0:0:0.1" />

                                        <ColorAnimation Storyboard.TargetName="optionMark"
                                                        Storyboard.TargetProperty="(Rectangle.Fill).(Color)"
                                                        BeginTime="0:0:0.1"
                                                        To="Transparent"    Duration="0:0:0.1" />


                                        <ThicknessAnimation Storyboard.TargetName="HideMark"
                                                            Storyboard.TargetProperty="Margin"
                                                            From="0,0,-40,0" To="0"
                                                            BeginTime="0:0:0.05"
                                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>





                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.56"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation  Storyboard.TargetProperty="Opacity"
                                              From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="TextBlockUnderline" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="10,15"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="{StaticResource SecondColor}"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="None"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextDecorations"  Value="Underline"/>
            </Trigger>
        </Style.Triggers>
    </Style>





    <Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="Width" Value="250"/>
        <Setter Property="Height" Value="250"/>
        <Setter Property="Margin" Value="0,3,0,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock Foreground="#FF333333" FontWeight="Bold" FontSize="12"
                                       HorizontalAlignment="Center"
                                       Text="{Binding}" VerticalAlignment="Center"/>
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <Grid.Resources>
                            <SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF"/>
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" CornerRadius="10">
                            <Grid>
                                <Grid.Resources>
                                    <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">

                                        <Border x:Name="border" Background="{StaticResource SecondColor}" Opacity="1" CornerRadius="5,0,0,0" Cursor="Hand">

                                            <Grid>
                                                <Path x:Name="path" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z" Fill="White" HorizontalAlignment="Center" Height="10"
                                                          Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                            </Grid>
                                        </Border>

                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>

                                                            <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                                            From="#0067E7" To="#014FB1"   Duration="0:0:0.25"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>

                                                            <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                                            From="#014FB1" To="#0067E7"  Duration="0:0:0.25"/>

                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>

                                    <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">

                                        <Border x:Name="border"  Background="{StaticResource SecondColor}" Opacity="1" CornerRadius="0,5,0,0" Cursor="Hand">
                                            <Grid>
                                                <Path x:Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z" Fill="White" HorizontalAlignment="Center" Height="10"
                                                          Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                            </Grid>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">

                                                <Trigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>

                                                            <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#0067E7" To="#014FB1"   AccelerationRatio="1" Duration="0:0:0.25"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>

                                                            <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#014FB1" To="#0067E7" AccelerationRatio="1"  Duration="0:0:0.25"/>

                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>
                                            </Trigger>

                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                    <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">

                                        <Border x:Name="border" Background="{StaticResource SecondColor}" Cursor="Hand">
                                            <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                  Content="{TemplateBinding Content}"
                                                                  TextElement.Foreground="White" 
                                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                              Margin="1,4,1,9"
                                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">

                                                <Trigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>

                                                            <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#0067E7" To="#014FB1"   AccelerationRatio="1" Duration="0:0:0.25"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>

                                                            <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#014FB1" To="#0067E7" AccelerationRatio="1"  Duration="0:0:0.25"/>

                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>
                                            </Trigger>

                                        </ControlTemplate.Triggers>

                                    </ControlTemplate>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="150"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="40"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Button x:Name="PART_PreviousButton" Foreground="White" Grid.Column="0"
                                            Focusable="False" HorizontalAlignment="Left"
                                            Grid.Row="0" 
                                            Template="{StaticResource PreviousButtonTemplate}"
                                        Width="49" />
                                <Button x:Name="PART_HeaderButton" Foreground="White" Grid.Column="1" FontWeight="Bold"
                                        Focusable="False" FontSize="15"
                                        Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}"/>
                                <Button x:Name="PART_NextButton" Foreground="White" Grid.Column="2" Focusable="False"
                                        HorizontalAlignment="Right" Height="Auto" Grid.Row="0" Template="{StaticResource NextButtonTemplate}" Width="49" Margin="0"/>
                                <Grid x:Name="PART_MonthView" Grid.ColumnSpan="3" Margin="10"
                                          HorizontalAlignment="Center"  Grid.Row="1"
                                          Visibility="Visible" Grid.RowSpan="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                </Grid>
                                <Grid x:Name="PART_YearView" Grid.ColumnSpan="3"
                                      Grid.Row="1" Visibility="Hidden">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                </Grid>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="PART_DisabledVisual" Fill="{StaticResource DisabledColor}" Opacity="0" RadiusY="2" RadiusX="2" Stretch="Fill" Stroke="{StaticResource DisabledColor}" StrokeThickness="1" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinWidth" Value="5"/>
        <Setter Property="MinHeight" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HighlightBackground"/>
                                        <ColorAnimation Duration="0" To="#ffffff" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HighlightBackground"/>

                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HighlightBackground"/>
                                        <!--<DoubleAnimation Duration="0" To=".35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText"/>-->
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected"/>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".75" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBackground"/>
                                        <ColorAnimation Duration="0" To="#ffffff" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="DayButtonFocusVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="DayButtonFocusVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active"/>
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="#FF777777" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="RegularDay"/>
                                <VisualState x:Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="TodayBackground"/>
                                        <!--<ColorAnimation Duration="0" To="#ffffff" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText"/>-->
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="NormalDay"/>
                                <VisualState x:Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Blackout"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="TodayBackground" Fill="White" StrokeThickness="1.5" Stroke="Black" Opacity="0" RadiusY="5" RadiusX="5"/>
                        <Rectangle x:Name="SelectedBackground" Fill="{StaticResource SecondColor}" Opacity="0" RadiusY="5" RadiusX="5"/>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                        <Rectangle x:Name="HighlightBackground" Fill="{StaticResource SecondColorSELECTED}" Opacity="0" RadiusY="5" RadiusX="5"/>
                        <ContentPresenter x:Name="NormalText" TextElement.Foreground="#FF333333"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="5,1,5,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Path x:Name="Blackout" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z" Fill="#FF000000" HorizontalAlignment="Stretch" Margin="3" Opacity="0" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Stretch"/>
                        <Rectangle x:Name="DayButtonFocusVisual" IsHitTestVisible="false" RadiusY="5" RadiusX="5" Stroke="White" Visibility="Collapsed"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CalendarButtonStyle" TargetType="{x:Type CalendarButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Background" Value="{StaticResource SecondColor}"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="MinHeight" Value="42"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Background"/>
                                        <ColorAnimation Duration="0" To="#ffffff" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Background"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected"/>

                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="#FF333333" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active"/>
                                <!--<Storyboard>
                                    <ColorAnimation Duration="0" To="#FF777777" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText"/>
                                </Storyboard>-->

                                <!--<Storyboard>

                                </Storyboard>-->

                                <VisualState x:Name="Inactive"/>

                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="CalendarButtonFocusVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="CalendarButtonFocusVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="SelectedBackground" Fill="{TemplateBinding Background}" Opacity="0" RadiusY="5" RadiusX="5"/>
                        <Rectangle x:Name="Background" Fill="{TemplateBinding Background}" Opacity="0" RadiusY="5" RadiusX="5"/>
                        <ContentPresenter x:Name="NormalText" TextElement.Foreground="#FF333333" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,0,1,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Rectangle x:Name="CalendarButtonFocusVisual" IsHitTestVisible="false" RadiusY="5" RadiusX="5" Stroke="Black" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="CalendarButtonFocusVisual" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="CalendarStyle" TargetType="{x:Type Calendar}">
        <Setter Property="CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}"/>
        <Setter Property="CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}"/>
        <Setter Property="CalendarItemStyle" Value="{StaticResource CalendarItemStyle}"/>
        <Setter Property="MinHeight" Value="100"/>
        <Setter Property="Foreground" Value="#FF333333"/>
        <Setter Property="Background" Value="White"/>


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <Border x:Name="PART_Root" HorizontalAlignment="Center" CornerRadius="25">
                        <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}"
                                          BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DatePicker}" x:Key="DatePickerAuth">
        <Setter Property="CalendarStyle" Value="{StaticResource CalendarStyle}"/>
        <Setter Property="IsTabStop" Value="True"/>
        <Setter Property="Margin" Value="10,15"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="IsTodayHighlighted" Value="True"/>
        <Setter Property="SelectedDateFormat" Value="Short"/>
        <Setter Property="Background" Value="{StaticResource AuthorizationBackgroundTB}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource CornerValue}"
                            Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" >
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid x:Name="PART_Root" Cursor="Hand" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.Resources>
                                    <SolidColorBrush x:Key="DisabledBrush" Color="#A5FFFFFF"/>
                                    <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                                        <Grid>

                                            <Grid Background="#11FFFFFF" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="20" Width="19" Margin="0" VerticalAlignment="Center" >
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="23*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                </Grid.RowDefinitions>

                                                <Border x:Name="BackgroundGradient" BorderBrush="#BF000000" BorderThickness="1,0,1,1"
                                                        Grid.ColumnSpan="4" CornerRadius="0,0,2,2" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3">
                                                    <Border.Background>
                                                        <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                                                            <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                                            <GradientStop Color="#F9FFFFFF" Offset="0.375"/>
                                                            <GradientStop Color="#E5FFFFFF" Offset="0.625"/>
                                                            <GradientStop Color="#C6FFFFFF" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                </Border>
                                                <Border Background="{StaticResource SecondColor}"
                                                        Grid.ColumnSpan="4" Grid.RowSpan="1" CornerRadius="2,2,0,0"
                                                        BorderThickness="1" BorderBrush="#BF000000"/>
                                                <Path Grid.ColumnSpan="4" Grid.Column="0" Data="M11.426758,8.4305077 L11.749023,8.4305077 L11.749023,16.331387 L10.674805,16.331387 L10.674805,10.299648 L9.0742188,11.298672 L9.0742188,10.294277 C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 C10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077 z M14.65086,8.4305077 L18.566387,8.4305077 L18.566387,9.3435936 L15.671368,9.3435936 L15.671368,11.255703 C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 C17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 C18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 C18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 C15.560365,16.438808 14.951641,16.234707 14.468243,15.826504 L14.881817,14.929531 C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 C17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 C17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 C15.83071,11.873379 15.399232,12.079271 15.016094,12.491055 L14.65086,12.238613 z" Fill="#FF2F2F2F" HorizontalAlignment="Center" Margin="4,3,4,3" Grid.Row="1" Grid.RowSpan="3" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Center"/>
                                                <Ellipse Grid.ColumnSpan="4" Fill="#FFFFFFFF" HorizontalAlignment="Center" Height="3" StrokeThickness="0" VerticalAlignment="Center" Width="3"/>

                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="auto"/>
                                </Grid.ColumnDefinitions>

                                <Label x:Name="HintTB" Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}"
                                    Padding="{TemplateBinding Padding}" Margin="3,0,3,0" />

                                <Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Foreground}"
                                        Focusable="False" HorizontalAlignment="Right" Margin="3,0,3,0"
                                        Grid.Row="0" Template="{StaticResource DropDownButtonTemplate}" VerticalAlignment="Top" Width="20"/>



                                <DatePickerTextBox x:Name="PART_TextBox" Grid.Column="0" Focusable="{TemplateBinding Focusable}"
                                                   Grid.Row="0"  Padding="{TemplateBinding Padding}">
                                    <DatePickerTextBox.Style>
                                        <Style TargetType="{x:Type DatePickerTextBox}">
                                            <Setter Property="Foreground" Value="Black"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                                                        <Grid>
                                                            <Grid.Resources>
                                                                <SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA"/>
                                                            </Grid.Resources>
                                                            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                                                    Background="{TemplateBinding Background}"
                                                                    CornerRadius="1" Opacity="1" Padding="{TemplateBinding Padding}">
                                                                <Grid x:Name="WatermarkContent" Background="{TemplateBinding Background}"
                                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                                                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Padding="2"/>

                                                                    <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                                  Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                    <Border x:Name="FocusVisual"  CornerRadius="1" IsHitTestVisible="False" Opacity="0"/>
                                                                </Grid>
                                                            </Border>
                                                        </Grid>

                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </DatePickerTextBox.Style>
                                </DatePickerTextBox>
                                <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.Column="0" Fill="#A5FFFFFF" RadiusY="10" Grid.Row="0" RadiusX="10"/>

                                    <Popup x:Name="PART_Popup" AllowsTransparency="True" PopupAnimation="Slide"  Placement="Bottom" 
                                           PlacementTarget="{Binding ElementName=border}" StaysOpen="False"/>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="PassData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource PassColor}"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="InvalidData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ErrorColor}"/>
                        </Trigger>




                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="#0067E7"   Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="Black"    Duration="0:0:0.3" />
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="Transparent"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>



                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" SourceName="PART_TextBox" Value="false"/>
                                <Condition Property="Text" SourceName="PART_TextBox" Value=""/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                            To="3,0,3,0"  Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                             To="-5,-35,2,0"  Duration="0:0:0.2" />

                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>


                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="#0067E7"   Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="Black"    Duration="0:0:0.3" />
                                        <ColorAnimation Storyboard.TargetName="border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="Transparent"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>


                        <DataTrigger Binding="{Binding IsKeyboardFocused, ElementName=PART_TextBox}" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource SecondColor}"/>
                            <Setter Property="Foreground" TargetName="HintTB" Value="{StaticResource SecondColor}"/>
                        </DataTrigger>



                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource DatePickerAuth}">
        <Setter Property="BorderBrush" Value="{StaticResource SecondColor}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource CornerValue}"
                            Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" >
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid x:Name="PART_Root" Cursor="Hand" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.Resources>
                                    <SolidColorBrush x:Key="DisabledBrush" Color="#A5FFFFFF"/>
                                    <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                                        <Grid>

                                            <Grid Background="#11FFFFFF" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="20" Width="19" Margin="0" VerticalAlignment="Center" >
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="23*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                </Grid.RowDefinitions>

                                                <Border x:Name="BackgroundGradient" BorderBrush="#BF000000" BorderThickness="1,0,1,1"
                                                        Grid.ColumnSpan="4" CornerRadius="0,0,2,2" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3">
                                                    <Border.Background>
                                                        <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                                                            <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                                            <GradientStop Color="#F9FFFFFF" Offset="0.375"/>
                                                            <GradientStop Color="#E5FFFFFF" Offset="0.625"/>
                                                            <GradientStop Color="#C6FFFFFF" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                </Border>
                                                <Border Background="{StaticResource SecondColor}"
                                                        Grid.ColumnSpan="4" Grid.RowSpan="1" CornerRadius="2,2,0,0"
                                                        BorderThickness="1" BorderBrush="#BF000000"/>
                                                <Path Grid.ColumnSpan="4" Grid.Column="0" Data="M11.426758,8.4305077 L11.749023,8.4305077 L11.749023,16.331387 L10.674805,16.331387 L10.674805,10.299648 L9.0742188,11.298672 L9.0742188,10.294277 C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 C10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077 z M14.65086,8.4305077 L18.566387,8.4305077 L18.566387,9.3435936 L15.671368,9.3435936 L15.671368,11.255703 C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 C17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 C18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 C18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 C15.560365,16.438808 14.951641,16.234707 14.468243,15.826504 L14.881817,14.929531 C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 C17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 C17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 C15.83071,11.873379 15.399232,12.079271 15.016094,12.491055 L14.65086,12.238613 z" Fill="#FF2F2F2F" HorizontalAlignment="Center" Margin="4,3,4,3" Grid.Row="1" Grid.RowSpan="3" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Center"/>
                                                <Ellipse Grid.ColumnSpan="4" Fill="#FFFFFFFF" HorizontalAlignment="Center" Height="3" StrokeThickness="0" VerticalAlignment="Center" Width="3"/>

                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="auto"/>
                                </Grid.ColumnDefinitions>

                                <Label x:Name="HintTB" Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}"
                                    Padding="{TemplateBinding Padding}" Margin="3,0,3,0" />

                                <Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Foreground}"
                                        Focusable="False" HorizontalAlignment="Right" Margin="3,0,3,0"
                                        Grid.Row="0" Template="{StaticResource DropDownButtonTemplate}" VerticalAlignment="Top" Width="20"/>



                                <DatePickerTextBox x:Name="PART_TextBox" Grid.Column="0" Focusable="{TemplateBinding Focusable}"
                                                   Grid.Row="0" Padding="{TemplateBinding Padding}">
                                    <DatePickerTextBox.Style>
                                        <Style TargetType="{x:Type DatePickerTextBox}">
                                            <Setter Property="Foreground" Value="Black"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                                                        <Grid>
                                                            <Grid.Resources>
                                                                <SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA"/>
                                                            </Grid.Resources>
                                                            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                                                    Background="{TemplateBinding Background}"
                                                                    CornerRadius="1" Opacity="1" Padding="{TemplateBinding Padding}">
                                                                <Grid x:Name="WatermarkContent" Background="{TemplateBinding Background}"
                                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                                                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Padding="2"/>

                                                                    <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                                  Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                    <Border x:Name="FocusVisual"  CornerRadius="1" IsHitTestVisible="False" Opacity="0"/>
                                                                </Grid>
                                                            </Border>
                                                        </Grid>

                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </DatePickerTextBox.Style>
                                </DatePickerTextBox>
                                <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.Column="0" Fill="#A5FFFFFF" RadiusY="10" Grid.Row="0" RadiusX="10"/>

                                    <Popup x:Name="PART_Popup" AllowsTransparency="True" PopupAnimation="Slide"  Placement="Bottom" 
                                           PlacementTarget="{Binding ElementName=border}" StaysOpen="False"/>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="Tag" Value="PassData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource PassColor}"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="InvalidData">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ErrorColor}"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="Black"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" SourceName="PART_TextBox" Value="false"/>
                                <Condition Property="Text" SourceName="PART_TextBox" Value=""/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                            To="3,0,3,0"  Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                             To="-5,-35,2,0"  Duration="0:0:0.2" />

                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="Black"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>




                        <DataTrigger Binding="{Binding IsKeyboardFocused, ElementName=PART_TextBox}" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource SecondColor}"/>
                            <Setter Property="Foreground" TargetName="HintTB" Value="{StaticResource SecondColor}"/>
                        </DataTrigger>



                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Gray"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121"/>



    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="5,10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource AuthorizationBackgroundTB}"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True" ClipToBounds="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" Width="18" Height="18" 
                                BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
                                CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid"  Margin="1" ClipToBounds="True">
                                <Ellipse x:Name="optionMark" Fill="White" 
                                         MinWidth="10" MinHeight="10"
                                         VerticalAlignment="Center" HorizontalAlignment="Center"
                                         Margin="0,0,0,-35"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.52"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="radioButtonBorder"
                                                        Storyboard.TargetProperty="(Border.Background).(Color)"
                                                        To="#0067E7"    Duration="0:0:0.2" />

                                        <ColorAnimation Storyboard.TargetName="radioButtonBorder"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"
                                                        To="#0067E7"    Duration="0:0:0.2" />
                                        <ThicknessAnimation Storyboard.TargetName="optionMark"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="0"
                                                            Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="radioButtonBorder"
                                                        Storyboard.TargetProperty="(Border.Background).(Color)"
                                                        To="Transparent"    Duration="0:0:0.3" />
                                        <ColorAnimation Storyboard.TargetName="radioButtonBorder"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"
                                                        To="Gray"    Duration="0:0:0.2" />
                                        <ThicknessAnimation Storyboard.TargetName="optionMark"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="0,0,0,-35"
                                                            Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>

                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style TargetType="{x:Type Button}" x:Key="WinButtonClose">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="MaxWidth" Value="27.5"/>
        <Setter Property="MinWidth" Value="27.5"/>
        <Setter Property="MinHeight" Value="27.5"/>
        <Setter Property="MaxHeight" Value="27.5"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="#E90000"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="border" Value="0.68"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="WinButtonOthers"
           BasedOn="{StaticResource WinButtonClose}" >

        <Setter Property="Background" Value="{StaticResource SecondColor}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="border" Value="0.68"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type Image}" x:Key="ImageClickable">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.85"/>
            </Trigger>


            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.30"/>
            </Trigger>

        </Style.Triggers>
    </Style>



    <Style x:Key="MenuButton" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="MinHeight" Value="60"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="-1,-1,0,-1"/>
        <Setter Property="MinWidth" Value="210"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" Tag="{TemplateBinding Tag}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="true">
                        <Grid>

                            <Border x:Name="IndicatorOfSelect" Margin="7.5,0,0,0" CornerRadius="2"
                                    Background="White" HorizontalAlignment="Left" Height="0" Width="5"/>

                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Tag" Value="NoUse"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--<DoubleAnimation Storyboard.TargetName="IndicatorOfSelect" Storyboard.TargetProperty="Height"
                                                          To="30" AccelerationRatio="1" Duration="0:0:0.25"/>-->
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#0067E7" To="#014FB1"   AccelerationRatio="1" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--<DoubleAnimation Storyboard.TargetName="IndicatorOfSelect" Storyboard.TargetProperty="Height"
                                                          To="0" AccelerationRatio="1" Duration="0:0:0.18"/>-->
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         From="#014FB1" To="#0067E7" AccelerationRatio="1"  Duration="0:0:0.25"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>




                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="Tag" Value="Using"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                          To="#014FB1"  Duration="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Tag" Value="Using"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                          To="#014FB1" Duration="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                        </MultiTrigger>



                        <Trigger Property="Tag" Value="Using" >
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IndicatorOfSelect" Storyboard.TargetProperty="Height"
                                                          To="30" AccelerationRatio="1" Duration="0:0:0.25"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IndicatorOfSelect" Storyboard.TargetProperty="Height"
                                                          To="0" AccelerationRatio="1" Duration="0:0:0.18"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>


                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity"
                                                         From="0.56" To="1"   AccelerationRatio="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Tag"  Value="Using">
                <Setter Property="Background" Value="#014FB1"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.56"/>
            </Trigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="Grid">
                <Style.Resources>
                    <Style TargetType="Image">
                        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
                    </Style>
                </Style.Resources>
            </Style>
        </Style.Resources>
    </Style>


    <Style x:Key="TextForMenuButtons" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="115"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Margin" Value="25,10,10,10"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>


    <Style x:Key="TextForOrders" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="DataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>

                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left"  Visibility="Collapsed" />
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Visibility="Collapsed" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type DataGrid}" >
        <Style.Resources>
            <Style TargetType="{x:Type Rectangle}">
                <Setter Property="Stroke" Value="{x:Null}"/>
            </Style>
        </Style.Resources>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border  CornerRadius="10" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" 
                             SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="False"  Background="{TemplateBinding Background}" CanContentScroll="False">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button Command="ApplicationCommands.SelectAll" Focusable="False" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}">
                                            <Button.Visibility>
                                                <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                                    <Binding.ConverterParameter>
                                                        <DataGridHeadersVisibility>All</DataGridHeadersVisibility>
                                                    </Binding.ConverterParameter>
                                                </Binding>
                                            </Button.Visibility>
                                        </Button>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1">
                                            <DataGridColumnHeadersPresenter.Visibility>
                                                <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                                    <Binding.ConverterParameter>
                                                        <DataGridHeadersVisibility>Column</DataGridHeadersVisibility>
                                                    </Binding.ConverterParameter>
                                                </Binding>
                                            </DataGridColumnHeadersPresenter.Visibility>
                                        </DataGridColumnHeadersPresenter>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" Grid.ColumnSpan="2" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Margin="0,5"
                                                   Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                   ViewportSize="{TemplateBinding ViewportHeight}"/>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}" Color="#FF000000"/>




    <Style x:Key="LeftColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}" CornerRadius="0,5,5,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Opacity" Value="0.86"/>
        <Setter Property="Width" Value="5"/>
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="BorderThickness" Value="0 1.5 2 1.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}" CornerRadius="0,5,5,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridColumnHeader}" x:Key="StandartHeader">
        <Setter Property="Opacity" Value="0.86"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Background" Value="{StaticResource SecondColor}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>

                        <Border x:Name="Border" Background="{TemplateBinding Background}" >
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>

                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left"  Style="{StaticResource LeftColumnHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource RightColumnHeaderGripperStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Left">
                            <Setter Property="CornerRadius" TargetName="Border" Value="5,0,0,5"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="Right">
                            <Setter Property="Visibility" TargetName="PART_LeftHeaderGripper" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="PART_RightHeaderGripper" Value="Collapsed"/>
                            <Setter Property="CornerRadius" TargetName="Border" Value="0,5,5,0"/>
                        </Trigger>
                        <Trigger Property="CanUserSort" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftHeader" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource StandartHeader}">
        <Setter Property="Tag" Value="Left"/>
    </Style>

    <Style x:Key="RightHeader" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource StandartHeader}">
        <Setter Property="Tag" Value="Right"/>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource StandartHeader}"/>




    <Style TargetType="{x:Type DataGridRow}" x:Key="DataRowBuscket">
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="{StaticResource CornerValue}"/>
            </Style>
        </Style.Resources>
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="Height" Value="175"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Grid>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="AUTO"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="BackBorder" Background="White" Opacity="0.6" Grid.RowSpan="2"/>

                        <Border x:Name="BorderShadow" Background="Transparent" 
                                BorderBrush="Black" BorderThickness="0.3"  Grid.RowSpan="2">
                            <Border.Effect>
                                <BlurEffect Radius="5"/>
                            </Border.Effect>
                        </Border>

                        <Border x:Name="Border"  BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" Margin="10"
                                SnapsToDevicePixels="True" Grid.RowSpan="2"/>

                        <DataGridCellsPresenter ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>



                        <DataGridDetailsPresenter Grid.Row="1"  Margin="10,0"
                                                  SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, 
                                                        ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, 
                                                        Converter={x:Static DataGrid.RowDetailsScrollingConverter}, 
                                                        RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Visibility="{TemplateBinding DetailsVisibility}">
                        </DataGridDetailsPresenter>




                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color"
                                                          To="#28000000"   AccelerationRatio="1" Duration="0:0:0.30"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="Background.Color"
                                                      From="#28000000"    To="Transparent" AccelerationRatio="1"  Duration="0:0:0.30"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>-->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type DataGridCell}" x:Key="GridForBuscket">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinHeight" Value="125"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Tag" Value="Left"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}" >
                    <Grid>
                        <Border x:Name="BackBorder" Background="White" Opacity="0.6" />

                        <ContentPresenter x:Name="Presenter" VerticalAlignment="Center" 
                                              HorizontalAlignment="Center" Margin="10"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HorizontalContentAlignment" Value="Left">
                            <Setter Property="HorizontalAlignment" TargetName="Presenter" Value="Left"/>
                            <Setter Property="Margin" TargetName="Presenter" Value="50,0,0,0"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="IsSelected" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsMouseCaptured" Value="True">
                            <Setter Property="IsSelected" Value="True"/>
                        </Trigger>



                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type DataGridCell}" x:Key="LeftDGCell">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinHeight" Value="150"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Tag" Value="Left"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}" >
                    <Grid>
                        <Border x:Name="BackBorder" Background="White" Opacity="0.6" />

                        <Border x:Name="BorderShadow" Background="Transparent"
                                BorderBrush="Black"
                                BorderThickness="0 0.1, 0 1" >
                            <Border.Effect>
                                <BlurEffect Radius="5"/>
                            </Border.Effect>
                        </Border>

                        <Border x:Name="Border"  BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="True">

                            <ContentPresenter x:Name="Presenter" VerticalAlignment="Center" 
                                              HorizontalAlignment="Center" Margin="10"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HorizontalContentAlignment" Value="Left">
                            <Setter Property="HorizontalAlignment" TargetName="Presenter" Value="Left"/>
                            <Setter Property="Margin" TargetName="Presenter" Value="50,0,0,0"/>
                        </Trigger>

                        <Trigger Property="Tag" Value="Left">
                            <Setter Property="CornerRadius" TargetName="BackBorder" Value="5,0,0,5"/>

                            <Setter Property="CornerRadius" TargetName="Border" Value="5,0,0,5"/>
                            <Setter Property="BorderThickness" TargetName="Border" Value="2,2,0,2"/>

                            <Setter Property="BorderThickness" TargetName="BorderShadow" Value="0.2 0.1, 0, 1"/>
                            <Setter Property="CornerRadius" TargetName="BorderShadow" Value="5,0,0,5"/>
                        </Trigger>
                        <Trigger Property="Tag" Value="Right">

                            <Setter Property="CornerRadius" TargetName="Border" Value="0,5,5,0"/>
                            <Setter Property="CornerRadius" TargetName="BackBorder" Value="0,5,5,0"/>
                            <Setter Property="BorderThickness" TargetName="Border" Value="0,2,2,2"/>

                            <Setter Property="BorderThickness" TargetName="BorderShadow" Value="0 0.1, 0.7 1"/>
                            <Setter Property="CornerRadius" TargetName="BorderShadow" Value="0,5,5,0"/>
                        </Trigger>


                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="IsSelected" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsMouseCaptured" Value="True">
                            <Setter Property="IsSelected" Value="True"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="Transparent"    Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>



                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="RightDGCell" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource LeftDGCell}">
        <Setter Property="Tag" Value="Right"/>
    </Style>

    <Style x:Key="ContenLeftDGCell" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource LeftDGCell}">
        <Setter Property="Tag" Value="Standart"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>

    <Style x:Key="RContenLeftDGCell" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource LeftDGCell}">
        <Setter Property="Tag" Value="Right"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>

    <Style x:Key="LContenLeftDGCell" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource RContenLeftDGCell}">
        <Setter Property="Tag" Value="Left"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>


    <Style  TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource LeftDGCell}">
        <Setter Property="Tag" Value="Standart"/>
    </Style>



    <Style TargetType="{x:Type DataGridRow}">
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="{StaticResource CornerValue}"/>
            </Style>
        </Style.Resources>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Margin" Value="0,5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>


            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation  Storyboard.TargetProperty="Background.Color"
                                                          To="#28000000"   AccelerationRatio="1" Duration="0:0:0.30"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetProperty="Background.Color"
                                                      From="#28000000"    To="Transparent" AccelerationRatio="1"  Duration="0:0:0.30"/>

                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>


        </Style.Triggers>
    </Style>




    <Style x:Key="ClearTextLB" TargetType="{x:Type Label}">
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="Content" Value="❌"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.70"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="ClosePageLB" TargetType="Label" BasedOn="{StaticResource ClearTextLB}">
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="RenderTransformOrigin" Value="0.515,0.525"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="100"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Top"
                                          Margin="0,-1,0,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.70"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="(Label.RenderTransform).
                                             (TransformGroup.Children)[2].(RotateTransform.Angle)" 
                                             To="180" Duration="0:0:0.6" >
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase EasingMode="EaseOut" Power="3" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="(Label.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                             To="0" Duration="0:0:0.5" >
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase EasingMode="EaseOut" Power="3" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>




    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFECF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAECFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderBrush" Value="{StaticResource SecondColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>

                        <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" CornerRadius="{StaticResource CornerValue}"
                            BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid>
                                <Border x:Name="splitBorder" Width="30" Background="Transparent" CornerRadius="0,3 ,2.9,0"
                                        SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right"/>


                                <Image x:Name="arrow" Source="/AppFolder/ResourceFolder/ImageFolder/IconForTextBox/arrowDownIcon.png" HorizontalAlignment="Right" Width="20" Height="20" Margin="5,0"/>

                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Source" TargetName="arrow" Value="/AppFolder/ResourceFolder/ImageFolder/IconForTextBox/arrowUpIcon.png"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="Gray"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="Gray"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1"
                   PopupAnimation="Slide" Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" CornerRadius="{StaticResource CornerValue}"  
                            BorderBrush="{StaticResource SecondColor}"                   
                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer" Background="{x:Null}" >
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Border x:Name="opaqueRect" Background="{Binding Background, ElementName=dropDownBorder}"
                                            CornerRadius="{Binding CornerRadius, ElementName=dropDownBorder}"
                                            BorderThickness="0.5" BorderBrush="Black"
                                            Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                            Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}" Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsHitTestVisible="false" Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

            <Label x:Name="HintTB" Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}"
                   Margin="3,9,3,0" Padding="10,0" />


        </Grid>

        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Text" Value=""/>
                    <Condition Property="IsDropDownOpen" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                            To="3,9,3,0"  Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                             To="-10,-26,2,0"  Duration="0:0:0.2" />

                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False"/>
                    <Condition Property="SelectedValue" Value="{x:Null}"/>
                </MultiTrigger.Conditions>
                <Setter Property="Opacity" Value="1" TargetName="HintTB"/>

            </MultiTrigger>

            <Trigger Property="IsDropDownOpen" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="Black"    Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Text" Value=""/>
                    <Condition Property="IsReadOnly" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                            To="3,9,3,0"  Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                             To="-10,-26,2,0"  Duration="0:0:0.2" />

                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="10"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}"
                                  Focusable="false" HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" CornerRadius="{StaticResource CornerValue}"  
                            BorderBrush="{StaticResource SecondColor}"       
                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer" Background="{x:Null}">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Border x:Name="opaqueRect" Background="{Binding Background, ElementName=dropDownBorder}"
                                            CornerRadius="{Binding CornerRadius, ElementName=dropDownBorder}"
                                            BorderThickness="0.5" BorderBrush="Black"
                                            Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                            Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" Margin="{TemplateBinding Padding}"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>


            <!--TextWrapping="{Binding local:PropertyClass.WrapTextForCB}"-->


            <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Margin="10,0" Padding="0,3"  MaxLength="{TemplateBinding local:PropertyClass.LengthTextForCB}"
                         Style="{StaticResource ComboBoxEditableTextBox}" Background="{TemplateBinding Background}"
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>

            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" 
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="Transparent"
                          Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ComboBoxToggleButton}"/>


            <Label x:Name="HintTB" Content="{TemplateBinding local:PropertyClass.HintTB}" Style="{StaticResource LabelForTB}"
                   Margin="3,9,3,0" Padding="10,0" />
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="local:PropertyClass.WrapTextForCB"  Value="Wrap">
                <Setter Property="TextWrapping" TargetName="PART_EditableTextBox" Value="Wrap"/>
            </Trigger>

            <!--<Trigger Property="IsFocused"  SourceName="PART_EditableTextBox" Value="True">
                <Setter Property="IsChecked" TargetName="toggleButton" Value="True"/>
            </Trigger>-->
            
            <Trigger Property="IsKeyboardFocused" SourceName="PART_EditableTextBox" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="Black"    Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Text" Value=""/>
                    <Condition Property="IsDropDownOpen" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                            To="3,9,3,0"  Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="HintTB" Storyboard.TargetProperty="Margin"
                                                             To="-10,-27,2,0"  Duration="0:0:0.2" />

                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>


            <Trigger Property="IsDropDownOpen" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="#0067E7"    Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="HintTB"
                                        Storyboard.TargetProperty="(Label.Foreground).(Color)"  To="Black"    Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>




            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="10"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Margin" Value="10,15"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="#55FFFFFF"/>
        <Setter Property="BorderBrush" Value="{StaticResource SecondColor}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="MaxDropDownHeight" Value="300"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="Tag" Value="PassData">
                <Setter Property="BorderBrush"  Value="{StaticResource PassColor}"/>
            </Trigger>
            <Trigger Property="Tag" Value="InvalidData">
                <Setter Property="BorderBrush"  Value="{StaticResource ErrorColor}"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2,0"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>











    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Red" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="rectangle" Background="{StaticResource SecondColor}" CornerRadius="5" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type ScrollBar}" >
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Margin" Value="0,5"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">


                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{StaticResource CornerValue}"/>

                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.Thumb>
                                <Thumb  x:Name="Thumb" Style="{StaticResource ScrollBarThumbVertical}"/>
                            </Track.Thumb>
                        </Track>


                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <Style x:Key="MessageBorderForList" TargetType="{x:Type Border}">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="CornerRadius" Value="{StaticResource CornerValue}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="15"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Style>
        </Style.Resources>
    </Style>


    <Style x:Key="BorderImage" TargetType="{x:Type Border}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0.7"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="CornerRadius" Value="{StaticResource CornerValue}"/>
        <Style.Triggers>
            <Trigger Property="Tag" Value="PassData">
                <Setter Property="BorderBrush"  Value="{StaticResource PassColor}"/>
            </Trigger>
            <Trigger Property="Tag" Value="InvalidData">
                <Setter Property="BorderBrush"  Value="{StaticResource ErrorColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="1,5"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="0.7"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Border x:Name="BackBorder" Background="White"
                                Opacity="0.68" CornerRadius="{StaticResource CornerValue}"/>

                        <Border x:Name="BorderShadow" Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1" CornerRadius="{StaticResource CornerValue}">
                            <Border.Effect>
                                <BlurEffect Radius="2"/>
                            </Border.Effect>
                        </Border>

                        <Border BorderThickness="{TemplateBinding BorderThickness}"
                             CornerRadius="{StaticResource CornerValue}" >
                            <ContentPresenter/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation 
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="#0067E7"    Duration="0:0:0.2" />
                            <ThicknessAnimation Storyboard.TargetProperty="Margin" To="1,3,1,5" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation
                                        Storyboard.TargetProperty="(Border.BorderBrush).(Color)"  To="LightGray"    Duration="0:0:0.2" />
                            <ThicknessAnimation Storyboard.TargetProperty="Margin" To="1,5,1,5" Duration="0:0:0.1"/>

                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

                <Setter Property="IsSelected" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>





    <Style TargetType="{x:Type ListViewItem}" x:Key="OrderListView">
        <Setter Property="Margin" Value="1,5"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="0.7"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Border x:Name="BackBorder" Background="{TemplateBinding Background}"
                                Opacity="0.68" CornerRadius="{StaticResource CornerValue}"/>

                        <Border x:Name="BorderShadow" Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1" CornerRadius="{StaticResource CornerValue}">
                            <Border.Effect>
                                <BlurEffect Radius="2"/>
                            </Border.Effect>
                        </Border>

                        <Border BorderThickness="{TemplateBinding BorderThickness}"
                             CornerRadius="{StaticResource CornerValue}" >
                            <ContentPresenter/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsSelected" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <Style TargetType="{x:Type DataGrid}" x:Key="DataGridOrder" >
        <Style.Resources>
            <Style TargetType="{x:Type Rectangle}">
                <Setter Property="Stroke" Value="{x:Null}"/>
            </Style>
        </Style.Resources>
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource DataGridColumnHeaderStyle}"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border  CornerRadius="10" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" 
                             SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="False"  Background="Red" CanContentScroll="False">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button Command="ApplicationCommands.SelectAll" Focusable="False" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}">
                                            <Button.Visibility>
                                                <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                                    <Binding.ConverterParameter>
                                                        <DataGridHeadersVisibility>All</DataGridHeadersVisibility>
                                                    </Binding.ConverterParameter>
                                                </Binding>
                                            </Button.Visibility>
                                        </Button>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1">
                                            <DataGridColumnHeadersPresenter.Visibility>
                                                <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                                    <Binding.ConverterParameter>
                                                        <DataGridHeadersVisibility>Column</DataGridHeadersVisibility>
                                                    </Binding.ConverterParameter>
                                                </Binding>
                                            </DataGridColumnHeadersPresenter.Visibility>
                                        </DataGridColumnHeadersPresenter>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" Grid.ColumnSpan="2" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Margin="0,5"
                                                   Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                   ViewportSize="{TemplateBinding ViewportHeight}"/>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ErrorText" TargetType="{x:Type TextBlock}">
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
        <Setter Property="TextTrimming" Value="None"/>
        <Setter Property="Foreground" Value="{StaticResource ErrorColor}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Padding" Value="0,10"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10"/>
    </Style>

    <SolidColorBrush x:Key="ListBox.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Static.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="#FFD9D9D9"/>


    <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush"  Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.69"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>

    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border>
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="25"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" Grid.Column="1" HorizontalAlignment="Center"
                                      Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>

                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" Grid.Column="1" HorizontalAlignment="Center" SnapsToDevicePixels="false"
                                  Stroke="{StaticResource Expander.Static.Arrow.Stroke}"
                                  StrokeThickness="2" VerticalAlignment="Center"/>
                            <ContentPresenter HorizontalAlignment="Left" Margin="0,0,4,0" RecognizesAccessKey="True" SnapsToDevicePixels="True"
                                              VerticalAlignment="Top" Height="27"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Cursor="Hand"
                                          Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}"
                                          FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}"
                                          FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}"
                                          Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="#A826A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="#FF26A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="#2E0080FF"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="#99006CD9"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="#FF26A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" Color="#5426A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" Color="#FF26A0DA"/>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="1,3"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="#22FFFFFF"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true" CornerRadius="{StaticResource CornerValue}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHover.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHover.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewFocus.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Border}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="TextBoxForAmount" TargetType="{x:Type TextBox}">
        <Setter Property="MaxLength" Value="3"/>
        <Setter Property="Foreground" Value="#434343"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#D3D3D3"/>
        <Setter Property="BorderThickness" Value="0,2"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}" SnapsToDevicePixels="True" >
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

    <Style x:Key="ButtonForAmount" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="LightGray"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0,-4,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5,0,0,5"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="RightBTN">
                            <Setter Property="CornerRadius" TargetName="border" Value="0,5,5,0" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>

                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                         To="DarkGray"   AccelerationRatio="1" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"
                                                          To="LightGray" AccelerationRatio="1"  Duration="0:0:0.25"/>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>


                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.40"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleBTNforOrder">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type MenuItem}" x:Key="MenuItemMoreData">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type MenuItem}">
                    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid Margin="-1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="13"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="30"/>
                                <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                            <Border x:Name="GlyphPanel" BorderBrush="#FF26A0DA" BorderThickness="1" Background="#3D26A0DA"
                                    Height="22" Margin="-1,0,0,0" Visibility="Hidden"
                                    VerticalAlignment="Center" Width="22">
                                <Path x:Name="Glyph" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="#FF212121" FlowDirection="LeftToRight" Height="11" Width="9"/>
                            </Border>
                            <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                            <Path x:Name="RightArrow" Grid.Column="5" Data="M0,0L4,3.5 0,7z" Fill="#FF212121" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center"/>
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="2"
                                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                   Placement="Right" VerticalOffset="-3">
                                <Border x:Name="SubMenuBorder" BorderBrush="#FF999999" BorderThickness="1" Background="White" Padding="2">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}"
                                                           Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                                           Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                            </Canvas>
                                            <!--<Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>-->
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF26A0DA"/>
                            <Setter Property="Opacity" TargetName="Icon" Value="0.50"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
                            <Setter Property="Fill" TargetName="Glyph" Value="#FF707070"/>
                            <Setter Property="Fill" TargetName="RightArrow" Value="#FF707070"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemMoreData}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    
                    <Border x:Name="templateRoot"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="5"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <Grid Margin="-1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="13"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="30"/>
                                <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center"
                                              Height="18" Margin="7,3,0,3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="Center" Width="18"/>
                            <Border x:Name="GlyphPanel" BorderBrush="#FF26A0DA" CornerRadius="5" BorderThickness="1"
                                    Background="#3D26A0DA" ClipToBounds="False" HorizontalAlignment="Center" 
                                    Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
                                <Path x:Name="Glyph" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="#FF212121" FlowDirection="LeftToRight" Height="11" Width="10"/>
                            </Border>
                            <ContentPresenter x:Name="menuHeaderContainer" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            <TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="#5026A0DA"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#5026A0DA"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
                            <Setter Property="Fill" TargetName="Glyph" Value="#FF707070"/>
                            <Setter Property="Opacity" TargetName="Icon" Value="0.50"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="#0A000000"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#21000000"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="ContextMenu">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border CornerRadius="5"
                            Background="White"
                            BorderBrush="Gray"
                            BorderThickness="1"
                            SnapsToDevicePixels="True">
                        <ItemsPresenter />
                        <Border.Effect>
                            <DropShadowEffect BlurRadius="10" Opacity="0.3"/>
                        </Border.Effect>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>




</ResourceDictionary>